#ifndef ARBRE_BIN_H
#define ARBRE_BIN_H

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "fonction-utile.h"

typedef struct Noeud Noeud;

struct Noeud
{
  int info;
  float freq;
  Noeud* succG; //sous arbre gauche
  Noeud* succD; //sous arbre droit
};

typedef Noeud* ArbreBin;


////////////////// AFFICHAGE /////////////////////////
//////////////////////////////////////////////////////


//parcourPrefixe: Affiche tout les elements dans l'ordre prefixe

void parcourPrefixe(ArbreBin A);

//afficheVal: Affiche les infos du noeud pointée

void afficheVal(ArbreBin A);

//afficheTbool: Affiche des elements selon la contenance du tableau Tbool

void afficheTbool(char* Tbool, int taille, int nbEspace);

//afficheTbool: Affiche A par indentation en partant d'une profondeur p

void affichePronfondeur(ArbreBin A, int profondeur, int estDernier, char* Tbool);

//afficheTbool: Affiche A par indentation

void afficheA(ArbreBin A);


//////////////// FONCTION ARBREBIN ///////////////////
//////////////////////////////////////////////////////


//creerArbre: Renvoie un arbre binaire dynamiquement allouer

ArbreBin creerArbre(int info, float freq, ArbreBin succG, ArbreBin succD);

//copieDyn: Renvoie une copie de l'AbreBin A qui sera Dynamiquement allouer

ArbreBin copieDyn(ArbreBin A);

//creerArbreHuff : Creer un arbre à partir du tableau T

ArbreBin creerArbreHuf(Noeud* TN, int taille);

//estDans : Verifie si le caractere c est dans l'Arbrebin A

int estDans(ArbreBin A, char c);

//estParfait: Verifie si l'ArbreBin A est un Arbre Binaire parfait

int estParfait(ArbreBin A);

//nbNoeud: Compte le nombre de noeud de l'ArbreBin A

int nbNoeud(ArbreBin A);


//////////// FONCTION TABLEAU DE NOEUDS //////////////
//////////////////////////////////////////////////////


//afficheN: Affiche le Noeud N

void afficheN(Noeud N);

//afficheTN: Affiche tout les Noeud du Tableau TN

void afficheTN(Noeud* TN, int taille);

//createTN : Creer un TN en initialisant tout les Noeuds avec des valeurs NULL 

Noeud* createTN(int taille);

//estDansTN : Verifie si le caractere c est dans le TN

int estDansTN(Noeud* TN, int c, int taille);

//initInfoTN : Initialise le champ "info" des Noeuds du TN avec un fichier

void initInfoTN(Noeud* TN, char* fichier, int taille);

//initFreqTN : Initialise le champ "freq" des Noeuds du TN avec un fichier

void initFreqTN(Noeud* TN,  char* fichier, int taille);

//initTN : Initialise les Noeuds du TN avec un fichier

void initTN(Noeud* TN, char* fichier, int taille);

//echangeN : Echange les valeurs de N1 et N2

void echangeN(Noeud* N1, Noeud* N2);

//triCroissTN : Tri le TN de maniere croissante en fonction des freq des Noeuds

void triCroisTN(Noeud* TN, int taille);

//fileToTN : Creer un tableau de Noeud a partir d'un fichier

Noeud* fileToTN(char* fichier, int* tailleTN);

//queueTN : Renvoie le tableau TN auquel on enleve le premier element

Noeud* queueTN(Noeud* TN, int* tailleTN);

//enregistrerTN : Enregistre le tableau TN dans un fichier

void enregistrerTN(Noeud* TN, int tailleTN, int nbCarTot, char* fichier);

//chargerTN : charge un tableau TN a partir d'un fichier

Noeud* chargerTN(int tailleTN, char* fichier);

#endif
