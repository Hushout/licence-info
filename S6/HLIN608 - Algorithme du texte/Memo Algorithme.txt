OPERATEUR BITS A BITS:

Description: Permet de faire des operations bits a bits sur des entiers non signés.

NOT <=> ~ (inverse les bits) 

unsigned a = 1;  	 // a == 0000 0000 0000 0001 (sur 16 bits)	
unsigned b = ~a; 	 // b == 1111 1111 1111 1110 (sur 16 bits)	

AND <=> & (combine les bits avec un ET, permet de creer des masks)

unsigned a = 0xF0F0; // a == 1111 0000 1111 0000
unsigned b = 0x00FF; // b == 0000 0000 1111 1111
unsigned c = a & b;  // c == 0000 0000 1111 0000 soit 0x00F0

OR <=> | (combine les bits avec un OU)

unsigned a = 0xF0F0; // a == 1111 0000 1111 0000
unsigned b = 0x00FF; // b == 0000 0000 1111 1111
unsigned c = a | b;  // c == 1111 0000 1111 1111 soit 0xF0FF

XOR <=> ^ (combine les bits avec un OU exclusif)

unsigned a = 0xF0F0; // a == 1111 0000 1111 0000
unsigned b = 0x00FF; // b == 0000 0000 1111 1111
unsigned c = a ^ b;  // c == 1111 0000 0000 1111 soit 0xF00F

SHR <=> >> (Décalage à droite des bits)

unsigned a = 0xF0F0; // a == 1111 0000 1111 0000
unsigned b = 2; 	 // nombre de decalage vers la droite
unsigned c = a >> b; // c == 0011 1100 0011 1100 soit 0x3C3C 

SHL <=> << (Décalage à gauche des bits)

unsigned a = 0xF0F0; // a == 1111 0000 1111 0000
unsigned b = 2; 	 // nombre de decalage vers la gauche
unsigned c = a << b; // c == 1100 0011 1100 0000 soit 0xC3C0

