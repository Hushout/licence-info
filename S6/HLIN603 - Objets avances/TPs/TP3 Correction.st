Object subclass: #ABR	instanceVariableNames: 'val sag sad'	classVariableNames: ''	poolDictionaries: ''	category: 'HLIN603-67-TP3'!!ABR methodsFor: 'enumerating' stamp: 'cd 4/3/2015 12:50'!do: aBlock	"iterate, infix depth first"	aBlock value: val.	sag do: aBlock.	sad do: aBlock.	! !!ABR methodsFor: 'manipulating' stamp: 'cd 3/21/2017 20:37'!search: element	^ (element == val) 		or: [ element < val				ifTrue: [ sag search: element ]				ifFalse: [ sad search: element  ] ]! !!ABR methodsFor: 'manipulating' stamp: 'cd 3/21/2017 20:49'!add: element	"ne nécessite aucun test explicite sur le receveur, suppose qu'une méthode de même nom soit définie sur la classe UndefinedObject"	^ element ~= val		ifTrue: [ 			element < val				ifTrue: [ self class new val: val ag: (sag add: element) ad: sad ]				ifFalse: [ self class new val: val ag: sag ad: (sad add: element) ] ]		ifFalse: [ self ]! !!ABR methodsFor: 'printing' stamp: 'cd 4/1/2015 19:25'!printOn: aStream	"Parcours préfixe"	"la méthode << de la classe Stream attend une chaîne en argument"	"la méthode printOn: de la classe UndefinedObject met nil dans aStream"	aStream << '('.	val printOn: aStream.	aStream << ' '.	sag printOn: aStream.	aStream << ' '.	sad printOn: aStream.	aStream << ')'	! !!ABR methodsFor: 'initialization' stamp: 'cd 4/1/2015 19:25'!val: v ag: ag ad: ad	val := v.	sag := ag.	sad := ad.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ABR class	instanceVariableNames: ''!!ABR class methodsFor: 'example' stamp: 'cd 3/21/2017 20:38'!example1	"self example1"	| a |	a := ((((((self val: 5) add: 3) add: 7) add: 2) add: 9) add: 4) add: 6.	Transcript show: (a search: 7).	^a search: 12.! !!ABR class methodsFor: 'example' stamp: 'cd 3/21/2017 20:38'!example2	"self example2"	| a |	a := self val: 5.	a := a add: 3.	a := a add: 7.	a := a add: 2.	a := a add: 9.	a := a add: 4.	a := a add: 6.	Transcript show: (a search: 7).	^a search: 12.! !!ABR class methodsFor: 'instance creation' stamp: 'cd 4/1/2015 19:27'!val: v ag: ag ad: ad	^self new val: v ag: ag ad: ad! !!ABR class methodsFor: 'instance creation' stamp: 'cd 4/1/2015 19:28'!val: v	^self val: v ag: nil ad: nil! !TestCase subclass: #ABRTest	instanceVariableNames: 'a b'	classVariableNames: ''	poolDictionaries: ''	category: 'HLIN603-67-TP3'!!ABRTest methodsFor: 'as yet unclassified' stamp: 'cd 4/1/2015 17:52'!testaddn	self assert:  ((((((a add: 3) add: 7) add: 2) add: 4) add: 6) add: 8) printString = '(5 (3 (2 nil nil) (4 nil nil)) (7 (6 nil nil) (8 nil nil)))'	! !!ABRTest methodsFor: 'as yet unclassified' stamp: 'cd 3/21/2017 20:39'!setUp	a := ABR val: 5 ag: nil ad: nil.	b := ((((((a add: 3) add: 7) add: 2) add: 4) add: 6) add: 8)	! !!ABRTest methodsFor: 'as yet unclassified' stamp: 'cd 4/1/2015 19:55'!testadd	self assert:  a printString = '(5 nil nil)'	! !Object subclass: #List	instanceVariableNames: 'val suite'	classVariableNames: ''	poolDictionaries: ''	category: 'HLIN603-67-TP3'!!List methodsFor: 'enumerating' stamp: 'cd 4/3/2015 11:02'!do: aBlock	"evaluate aBlock for elements of the list"	aBlock value: (self first).	suite do: aBlock.! !!List methodsFor: 'initialization' stamp: 'cd 4/2/2015 21:05'!first: element suite:  uneListe	val := element.	suite := uneListe.	 ^self! !!List methodsFor: 'accessing' stamp: 'cd 4/2/2015 21:07'!suite	^suite! !!List methodsFor: 'accessing' stamp: 'cd 4/2/2015 21:06'!first	^val! !!List methodsFor: 'printing' stamp: 'cd 4/2/2015 21:12'!printSuiteOn: aStream	aStream space.	val printOn: aStream.	suite printSuiteOn: aStream.	! !!List methodsFor: 'manipulating' stamp: 'cd 4/3/2015 11:59'!printOn: aStream	aStream nextPut: $(.	val printOn: aStream.	suite do: [ :each | aStream space. each printOn:  aStream].	aStream nextPut: $).	! !!List methodsFor: 'manipulating' stamp: 'cd 4/2/2015 21:32'!append: aList	^(self suite append: aList) addFirst: self first	! !!List methodsFor: 'manipulating' stamp: 'cd 4/2/2015 20:51'!length	^1 + suite length! !!List methodsFor: 'manipulating' stamp: 'cd 4/2/2015 22:49'!addFirst: element	^self class new first: element suite: self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!List class	instanceVariableNames: ''!!List class methodsFor: 'instance-creation' stamp: 'cd 4/2/2015 20:59'!empty	^nil	! !!List class methodsFor: 'instance-creation' stamp: 'cd 4/2/2015 21:06'!with: element	^super new first: element suite: self empty	! !!List class methodsFor: 'example' stamp: 'cd 4/3/2015 11:01'!example	"self example"	| l1 l2 |	l1 := (self empty addFirst: 3) addFirst: 5.	l2 := (self empty addFirst: 4) addFirst: 6.	l2 do: [ :each | Transcript show: each. Transcript space].	Transcript show: l2 length.	Transcript show: (l2 append: l1).	^l1 append: l2! !